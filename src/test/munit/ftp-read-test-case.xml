<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:ftp="http://www.mulesoft.org/schema/mule/ftp"
      xmlns:java="http://www.mulesoft.org/schema/mule/java" xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
        http://www.mulesoft.org/schema/mule/ftp http://www.mulesoft.org/schema/mule/ftp/current/mule-ftp.xsd
        http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd">

    <munit:config name="ftp-read-test-case.xml"/>

    <munit:dynamic-port propertyName="ftp.server.port"/>

    <munit:before-suite name="startFtpTestServer-readTestCase">
        <java:invoke-static class="org.mule.extension.ftp.internal.lifecycle.FtpServerLifecycleManager"
                            method="startFtpServer(String)">
            <java:args>
                #[{
                arg0: ${ftp.server.port},
                }]
            </java:args>
        </java:invoke-static>
    </munit:before-suite>

    <munit:after-suite name="clearFtpTestServer-readTestCase">
        <java:invoke-static class="org.mule.extension.ftp.internal.lifecycle.FtpServerLifecycleManager"
                            method="stopFtpServer()">
            <java:args>
                #[{}]
            </java:args>
        </java:invoke-static>
    </munit:after-suite>

    <ftp:config name="config-with-limited-pool">
        <ftp:connection username="anonymous" password="password" host="localhost" port="${ftp.server.port}"
                        workingDir="/">
            <pooling-profile exhaustedAction="WHEN_EXHAUSTED_WAIT" maxActive="1" maxIdle="1" maxWait="5000"/>
        </ftp:connection>
    </ftp:config>

    <munit:test name="ftp-read-with-limited-pool" description="Perform a read operation with a pooling profile which allows only 1 active connection">
        <munit:behavior>
            <set-variable variableName="fileContent" value="I just want to impress Mr. Stark"/>
            <set-variable variableName="fileName" value="file.txt"/>
            <ftp:write config-ref="config-with-limited-pool" path="#[vars.fileName]">
                <ftp:content>#[vars.fileContent]</ftp:content>
            </ftp:write>
        </munit:behavior>
        <munit:execution>
            <ftp:read config-ref="config-with-limited-pool" path='#[vars.fileName]'/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert>
                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts
                                     ---
                                    payload must equalTo(vars.fileContent)
                                    ]]]>
                </munit-tools:that>
            </munit-tools:assert>
        </munit:validation>
    </munit:test>

</mule>







